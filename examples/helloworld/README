Erlvolt 01./alpha - README of Hello World sample

A minimal sample to access VoltDB with an Erlang client.

These samples works with the catalog and server of the Java examples in
<voltdb>/examples/helloworld.

The individual files in this folder show alternate ways to access String data
in a row of a result table coming from VoltDB. See below


Prerequisites
-------------

 * Tested with Erlang 13B-1 and Java 1.6.0-17.
 * Erlang 12B-4 may be a minimum. 
 * Java 1.6.0-18 is recommend anyway by VoltDB.
 * Compile and run the /Java/ helloworld sample

 
Running Samples
---------------

You should get the Java samples in <voltdb>/examples/helloworld to run first to
have the VoltDB server that you need for the Erlang examples here.

To run the examples in this folder, *start* the VoltDB server that you built 
with said Java example, go into this folder here with a seperate terminal
(>erlvolt</examples/helloworld) and from the command line run 

$> erlc ../../erlvolt.erl; 
$> erlc client.erl;  erl -s client run -s init stop -noshell

This should print 'Hola Mundo!', just as the Java example. Note that you will
get errors if the database was already filled. E.g. because you ran the sample
Java client and did not restart the server after that.

Now restart the VoltDB server (to empty the database) and run

$> erlc client2.erl; erl -s client2 run -s init stop -noshell

Restart the VoltDB server (to empty the database) and run

$> erlc client3.erl; erl -s client3 run -s init stop -noshell

The results are all identical, the source not quite.

- or -

you can also use the supplied batches listed below. Remember to restart the
server inbetween, or live with the warnings.

./hello
./client2
./client3


Demonstrated Concepts
---------------------

The Erlang files presented here are almost all identical and demonstrate a 
simplistic use of storing and retrieving data in VoltDB using Erlang.

The individual files in this folder show alternate ways to access String data
in a row of a result table coming from VoltDB. See below


* client.erl 

Emulates the exact functionality of the Java example
voltdb/examples/helloworld/Client.java

(This file is almost identical with ../../hello.erl.)


* client2.erl

Shows an alternate way to access fields, using the column index number.


* client3.erl

Shows an alternate way to access fields, fetching rows as records and
accordingly using the record field names to access the fields.


* Concretely, the difference is illustrated by these lines:

  client.erl 

        Row = erlvolt:fetchRow(Table, 1),
		. . .
        erlvolt:getString(Row, Table, "HELLO"), 
        erlvolt:getString(Row, Table, "WORLD");

  client2.erl

        Row = erlvolt:fetchRow(Table, 1),
		. . .
        erlvolt:getString(Row, 1), 
        erlvolt:getString(Row, 2);

  client3.erl

        Row = erlvolt:fetchRecord(Table, 1),
		. . .
        erlvolt:getString(Record, #helloquery.hello), 
        erlvolt:getString(Record, #helloquery.world);

The latter is as fast as the second as #helloquery.hello is converted to 2
at compile time. (2, not 1, because records have a leading type atom).